{"ast":null,"code":"import decodeComponent from 'decode-uri-component';\nimport splitOnFirst from 'split-on-first';\nimport { includeKeys } from 'filter-obj';\n\nconst isNullOrUndefined = value => value === null || value === undefined; // eslint-disable-next-line unicorn/prefer-code-point\n\n\nconst strictUriEncode = string => encodeURIComponent(string).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n  switch (options.arrayFormat) {\n    case 'index':\n      {\n        return key => (result, value) => {\n          const index = result.length;\n\n          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n            return result;\n          }\n\n          if (value === null) {\n            return [...result, [encode(key, options), '[', index, ']'].join('')];\n          }\n\n          return [...result, [encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')];\n        };\n      }\n\n    case 'bracket':\n      {\n        return key => (result, value) => {\n          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n            return result;\n          }\n\n          if (value === null) {\n            return [...result, [encode(key, options), '[]'].join('')];\n          }\n\n          return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n        };\n      }\n\n    case 'colon-list-separator':\n      {\n        return key => (result, value) => {\n          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n            return result;\n          }\n\n          if (value === null) {\n            return [...result, [encode(key, options), ':list='].join('')];\n          }\n\n          return [...result, [encode(key, options), ':list=', encode(value, options)].join('')];\n        };\n      }\n\n    case 'comma':\n    case 'separator':\n    case 'bracket-separator':\n      {\n        const keyValueSep = options.arrayFormat === 'bracket-separator' ? '[]=' : '=';\n        return key => (result, value) => {\n          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n            return result;\n          } // Translate null to an empty string so that it doesn't serialize as 'null'\n\n\n          value = value === null ? '' : value;\n\n          if (result.length === 0) {\n            return [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n          }\n\n          return [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n        };\n      }\n\n    default:\n      {\n        return key => (result, value) => {\n          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n            return result;\n          }\n\n          if (value === null) {\n            return [...result, encode(key, options)];\n          }\n\n          return [...result, [encode(key, options), '=', encode(value, options)].join('')];\n        };\n      }\n  }\n}\n\nfunction parserForArrayFormat(options) {\n  let result;\n\n  switch (options.arrayFormat) {\n    case 'index':\n      {\n        return (key, value, accumulator) => {\n          result = /\\[(\\d*)]$/.exec(key);\n          key = key.replace(/\\[\\d*]$/, '');\n\n          if (!result) {\n            accumulator[key] = value;\n            return;\n          }\n\n          if (accumulator[key] === undefined) {\n            accumulator[key] = {};\n          }\n\n          accumulator[key][result[1]] = value;\n        };\n      }\n\n    case 'bracket':\n      {\n        return (key, value, accumulator) => {\n          result = /(\\[])$/.exec(key);\n          key = key.replace(/\\[]$/, '');\n\n          if (!result) {\n            accumulator[key] = value;\n            return;\n          }\n\n          if (accumulator[key] === undefined) {\n            accumulator[key] = [value];\n            return;\n          }\n\n          accumulator[key] = [...accumulator[key], value];\n        };\n      }\n\n    case 'colon-list-separator':\n      {\n        return (key, value, accumulator) => {\n          result = /(:list)$/.exec(key);\n          key = key.replace(/:list$/, '');\n\n          if (!result) {\n            accumulator[key] = value;\n            return;\n          }\n\n          if (accumulator[key] === undefined) {\n            accumulator[key] = [value];\n            return;\n          }\n\n          accumulator[key] = [...accumulator[key], value];\n        };\n      }\n\n    case 'comma':\n    case 'separator':\n      {\n        return (key, value, accumulator) => {\n          const isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n          const isEncodedArray = typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator);\n          value = isEncodedArray ? decode(value, options) : value;\n          const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n          accumulator[key] = newValue;\n        };\n      }\n\n    case 'bracket-separator':\n      {\n        return (key, value, accumulator) => {\n          const isArray = /(\\[])$/.test(key);\n          key = key.replace(/\\[]$/, '');\n\n          if (!isArray) {\n            accumulator[key] = value ? decode(value, options) : value;\n            return;\n          }\n\n          const arrayValue = value === null ? [] : value.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n          if (accumulator[key] === undefined) {\n            accumulator[key] = arrayValue;\n            return;\n          }\n\n          accumulator[key] = [...accumulator[key], ...arrayValue];\n        };\n      }\n\n    default:\n      {\n        return (key, value, accumulator) => {\n          if (accumulator[key] === undefined) {\n            accumulator[key] = value;\n            return;\n          }\n\n          accumulator[key] = [...[accumulator[key]].flat(), value];\n        };\n      }\n  }\n}\n\nfunction validateArrayFormatSeparator(value) {\n  if (typeof value !== 'string' || value.length !== 1) {\n    throw new TypeError('arrayFormatSeparator must be single character string');\n  }\n}\n\nfunction encode(value, options) {\n  if (options.encode) {\n    return options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n  }\n\n  return value;\n}\n\nfunction decode(value, options) {\n  if (options.decode) {\n    return decodeComponent(value);\n  }\n\n  return value;\n}\n\nfunction keysSorter(input) {\n  if (Array.isArray(input)) {\n    return input.sort();\n  }\n\n  if (typeof input === 'object') {\n    return keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map(key => input[key]);\n  }\n\n  return input;\n}\n\nfunction removeHash(input) {\n  const hashStart = input.indexOf('#');\n\n  if (hashStart !== -1) {\n    input = input.slice(0, hashStart);\n  }\n\n  return input;\n}\n\nfunction getHash(url) {\n  let hash = '';\n  const hashStart = url.indexOf('#');\n\n  if (hashStart !== -1) {\n    hash = url.slice(hashStart);\n  }\n\n  return hash;\n}\n\nfunction parseValue(value, options) {\n  if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === 'string' && value.trim() !== '') {\n    value = Number(value);\n  } else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n    value = value.toLowerCase() === 'true';\n  }\n\n  return value;\n}\n\nexport function extract(input) {\n  input = removeHash(input);\n  const queryStart = input.indexOf('?');\n\n  if (queryStart === -1) {\n    return '';\n  }\n\n  return input.slice(queryStart + 1);\n}\nexport function parse(query, options) {\n  options = {\n    decode: true,\n    sort: true,\n    arrayFormat: 'none',\n    arrayFormatSeparator: ',',\n    parseNumbers: false,\n    parseBooleans: false,\n    ...options\n  };\n  validateArrayFormatSeparator(options.arrayFormatSeparator);\n  const formatter = parserForArrayFormat(options); // Create an object with no prototype\n\n  const returnValue = Object.create(null);\n\n  if (typeof query !== 'string') {\n    return returnValue;\n  }\n\n  query = query.trim().replace(/^[?#&]/, '');\n\n  if (!query) {\n    return returnValue;\n  }\n\n  for (const parameter of query.split('&')) {\n    if (parameter === '') {\n      continue;\n    }\n\n    const parameter_ = options.decode ? parameter.replace(/\\+/g, ' ') : parameter;\n    let [key, value] = splitOnFirst(parameter_, '=');\n\n    if (key === undefined) {\n      key = parameter_;\n    } // Missing `=` should be `null`:\n    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\n\n    value = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n    formatter(decode(key, options), value, returnValue);\n  }\n\n  for (const [key, value] of Object.entries(returnValue)) {\n    if (typeof value === 'object' && value !== null) {\n      for (const [key2, value2] of Object.entries(value)) {\n        value[key2] = parseValue(value2, options);\n      }\n    } else {\n      returnValue[key] = parseValue(value, options);\n    }\n  }\n\n  if (options.sort === false) {\n    return returnValue;\n  } // TODO: Remove the use of `reduce`.\n  // eslint-disable-next-line unicorn/no-array-reduce\n\n\n  return (options.sort === true ? Object.keys(returnValue).sort() : Object.keys(returnValue).sort(options.sort)).reduce((result, key) => {\n    const value = returnValue[key];\n\n    if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n      // Sort object keys, not values\n      result[key] = keysSorter(value);\n    } else {\n      result[key] = value;\n    }\n\n    return result;\n  }, Object.create(null));\n}\nexport function stringify(object, options) {\n  if (!object) {\n    return '';\n  }\n\n  options = {\n    encode: true,\n    strict: true,\n    arrayFormat: 'none',\n    arrayFormatSeparator: ',',\n    ...options\n  };\n  validateArrayFormatSeparator(options.arrayFormatSeparator);\n\n  const shouldFilter = key => options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === '';\n\n  const formatter = encoderForArrayFormat(options);\n  const objectCopy = {};\n\n  for (const [key, value] of Object.entries(object)) {\n    if (!shouldFilter(key)) {\n      objectCopy[key] = value;\n    }\n  }\n\n  const keys = Object.keys(objectCopy);\n\n  if (options.sort !== false) {\n    keys.sort(options.sort);\n  }\n\n  return keys.map(key => {\n    const value = object[key];\n\n    if (value === undefined) {\n      return '';\n    }\n\n    if (value === null) {\n      return encode(key, options);\n    }\n\n    if (Array.isArray(value)) {\n      if (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n        return encode(key, options) + '[]';\n      }\n\n      return value.reduce(formatter(key), []).join('&');\n    }\n\n    return encode(key, options) + '=' + encode(value, options);\n  }).filter(x => x.length > 0).join('&');\n}\nexport function parseUrl(url, options) {\n  options = {\n    decode: true,\n    ...options\n  };\n  let [url_, hash] = splitOnFirst(url, '#');\n\n  if (url_ === undefined) {\n    url_ = url;\n  }\n\n  return {\n    url: url_?.split('?')?.[0] ?? '',\n    query: parse(extract(url), options),\n    ...(options && options.parseFragmentIdentifier && hash ? {\n      fragmentIdentifier: decode(hash, options)\n    } : {})\n  };\n}\nexport function stringifyUrl(object, options) {\n  options = {\n    encode: true,\n    strict: true,\n    [encodeFragmentIdentifier]: true,\n    ...options\n  };\n  const url = removeHash(object.url).split('?')[0] || '';\n  const queryFromUrl = extract(object.url);\n  const query = { ...parse(queryFromUrl, {\n      sort: false\n    }),\n    ...object.query\n  };\n  let queryString = stringify(query, options);\n\n  if (queryString) {\n    queryString = `?${queryString}`;\n  }\n\n  let hash = getHash(object.url);\n\n  if (object.fragmentIdentifier) {\n    const urlObjectForFragmentEncode = new URL(url);\n    urlObjectForFragmentEncode.hash = object.fragmentIdentifier;\n    hash = options[encodeFragmentIdentifier] ? urlObjectForFragmentEncode.hash : `#${object.fragmentIdentifier}`;\n  }\n\n  return `${url}${queryString}${hash}`;\n}\nexport function pick(input, filter, options) {\n  options = {\n    parseFragmentIdentifier: true,\n    [encodeFragmentIdentifier]: false,\n    ...options\n  };\n  const {\n    url,\n    query,\n    fragmentIdentifier\n  } = parseUrl(input, options);\n  return stringifyUrl({\n    url,\n    query: includeKeys(query, filter),\n    fragmentIdentifier\n  }, options);\n}\nexport function exclude(input, filter, options) {\n  const exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n  return pick(input, exclusionFilter, options);\n}","map":{"version":3,"sources":["D:/funix/NJS301x_1.0-A_VN Lập trình Web Back-End với NodeJS/assignment 03/Frontend Assignemnt 03 Admin App/node_modules/query-string/base.js"],"names":["decodeComponent","splitOnFirst","includeKeys","isNullOrUndefined","value","undefined","strictUriEncode","string","encodeURIComponent","replace","x","charCodeAt","toString","toUpperCase","encodeFragmentIdentifier","Symbol","encoderForArrayFormat","options","arrayFormat","key","result","index","length","skipNull","skipEmptyString","encode","join","keyValueSep","arrayFormatSeparator","parserForArrayFormat","accumulator","exec","isArray","includes","isEncodedArray","decode","newValue","split","map","item","test","arrayValue","flat","validateArrayFormatSeparator","TypeError","strict","keysSorter","input","Array","sort","Object","keys","a","b","Number","removeHash","hashStart","indexOf","slice","getHash","url","hash","parseValue","parseNumbers","isNaN","trim","parseBooleans","toLowerCase","extract","queryStart","parse","query","formatter","returnValue","create","parameter","parameter_","entries","key2","value2","reduce","Boolean","stringify","object","shouldFilter","objectCopy","filter","parseUrl","url_","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryFromUrl","queryString","urlObjectForFragmentEncode","URL","pick","exclude","exclusionFilter"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,sBAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,WAAR,QAA0B,YAA1B;;AAEA,MAAMC,iBAAiB,GAAGC,KAAK,IAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAA/D,C,CAEA;;;AACA,MAAMC,eAAe,GAAGC,MAAM,IAAIC,kBAAkB,CAACD,MAAD,CAAlB,CAA2BE,OAA3B,CAAmC,UAAnC,EAA+CC,CAAC,IAAK,IAAGA,CAAC,CAACC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,EAA6BC,WAA7B,EAA2C,EAAnG,CAAlC;;AAEA,MAAMC,wBAAwB,GAAGC,MAAM,CAAC,0BAAD,CAAvC;;AAEA,SAASC,qBAAT,CAA+BC,OAA/B,EAAwC;AACvC,UAAQA,OAAO,CAACC,WAAhB;AACC,SAAK,OAAL;AAAc;AACb,eAAOC,GAAG,IAAI,CAACC,MAAD,EAAShB,KAAT,KAAmB;AAChC,gBAAMiB,KAAK,GAAGD,MAAM,CAACE,MAArB;;AAEA,cACClB,KAAK,KAAKC,SAAV,IACIY,OAAO,CAACM,QAAR,IAAoBnB,KAAK,KAAK,IADlC,IAEIa,OAAO,CAACO,eAAR,IAA2BpB,KAAK,KAAK,EAH1C,EAIE;AACD,mBAAOgB,MAAP;AACA;;AAED,cAAIhB,KAAK,KAAK,IAAd,EAAoB;AACnB,mBAAO,CACN,GAAGgB,MADG,EACK,CAACK,MAAM,CAACN,GAAD,EAAMF,OAAN,CAAP,EAAuB,GAAvB,EAA4BI,KAA5B,EAAmC,GAAnC,EAAwCK,IAAxC,CAA6C,EAA7C,CADL,CAAP;AAGA;;AAED,iBAAO,CACN,GAAGN,MADG,EAEN,CAACK,MAAM,CAACN,GAAD,EAAMF,OAAN,CAAP,EAAuB,GAAvB,EAA4BQ,MAAM,CAACJ,KAAD,EAAQJ,OAAR,CAAlC,EAAoD,IAApD,EAA0DQ,MAAM,CAACrB,KAAD,EAAQa,OAAR,CAAhE,EAAkFS,IAAlF,CAAuF,EAAvF,CAFM,CAAP;AAIA,SArBD;AAsBA;;AAED,SAAK,SAAL;AAAgB;AACf,eAAOP,GAAG,IAAI,CAACC,MAAD,EAAShB,KAAT,KAAmB;AAChC,cACCA,KAAK,KAAKC,SAAV,IACIY,OAAO,CAACM,QAAR,IAAoBnB,KAAK,KAAK,IADlC,IAEIa,OAAO,CAACO,eAAR,IAA2BpB,KAAK,KAAK,EAH1C,EAIE;AACD,mBAAOgB,MAAP;AACA;;AAED,cAAIhB,KAAK,KAAK,IAAd,EAAoB;AACnB,mBAAO,CACN,GAAGgB,MADG,EAEN,CAACK,MAAM,CAACN,GAAD,EAAMF,OAAN,CAAP,EAAuB,IAAvB,EAA6BS,IAA7B,CAAkC,EAAlC,CAFM,CAAP;AAIA;;AAED,iBAAO,CACN,GAAGN,MADG,EAEN,CAACK,MAAM,CAACN,GAAD,EAAMF,OAAN,CAAP,EAAuB,KAAvB,EAA8BQ,MAAM,CAACrB,KAAD,EAAQa,OAAR,CAApC,EAAsDS,IAAtD,CAA2D,EAA3D,CAFM,CAAP;AAIA,SApBD;AAqBA;;AAED,SAAK,sBAAL;AAA6B;AAC5B,eAAOP,GAAG,IAAI,CAACC,MAAD,EAAShB,KAAT,KAAmB;AAChC,cACCA,KAAK,KAAKC,SAAV,IACIY,OAAO,CAACM,QAAR,IAAoBnB,KAAK,KAAK,IADlC,IAEIa,OAAO,CAACO,eAAR,IAA2BpB,KAAK,KAAK,EAH1C,EAIE;AACD,mBAAOgB,MAAP;AACA;;AAED,cAAIhB,KAAK,KAAK,IAAd,EAAoB;AACnB,mBAAO,CACN,GAAGgB,MADG,EAEN,CAACK,MAAM,CAACN,GAAD,EAAMF,OAAN,CAAP,EAAuB,QAAvB,EAAiCS,IAAjC,CAAsC,EAAtC,CAFM,CAAP;AAIA;;AAED,iBAAO,CACN,GAAGN,MADG,EAEN,CAACK,MAAM,CAACN,GAAD,EAAMF,OAAN,CAAP,EAAuB,QAAvB,EAAiCQ,MAAM,CAACrB,KAAD,EAAQa,OAAR,CAAvC,EAAyDS,IAAzD,CAA8D,EAA9D,CAFM,CAAP;AAIA,SApBD;AAqBA;;AAED,SAAK,OAAL;AACA,SAAK,WAAL;AACA,SAAK,mBAAL;AAA0B;AACzB,cAAMC,WAAW,GAAGV,OAAO,CAACC,WAAR,KAAwB,mBAAxB,GACjB,KADiB,GAEjB,GAFH;AAIA,eAAOC,GAAG,IAAI,CAACC,MAAD,EAAShB,KAAT,KAAmB;AAChC,cACCA,KAAK,KAAKC,SAAV,IACIY,OAAO,CAACM,QAAR,IAAoBnB,KAAK,KAAK,IADlC,IAEIa,OAAO,CAACO,eAAR,IAA2BpB,KAAK,KAAK,EAH1C,EAIE;AACD,mBAAOgB,MAAP;AACA,WAP+B,CAShC;;;AACAhB,UAAAA,KAAK,GAAGA,KAAK,KAAK,IAAV,GAAiB,EAAjB,GAAsBA,KAA9B;;AAEA,cAAIgB,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;AACxB,mBAAO,CAAC,CAACG,MAAM,CAACN,GAAD,EAAMF,OAAN,CAAP,EAAuBU,WAAvB,EAAoCF,MAAM,CAACrB,KAAD,EAAQa,OAAR,CAA1C,EAA4DS,IAA5D,CAAiE,EAAjE,CAAD,CAAP;AACA;;AAED,iBAAO,CAAC,CAACN,MAAD,EAASK,MAAM,CAACrB,KAAD,EAAQa,OAAR,CAAf,EAAiCS,IAAjC,CAAsCT,OAAO,CAACW,oBAA9C,CAAD,CAAP;AACA,SAjBD;AAkBA;;AAED;AAAS;AACR,eAAOT,GAAG,IAAI,CAACC,MAAD,EAAShB,KAAT,KAAmB;AAChC,cACCA,KAAK,KAAKC,SAAV,IACIY,OAAO,CAACM,QAAR,IAAoBnB,KAAK,KAAK,IADlC,IAEIa,OAAO,CAACO,eAAR,IAA2BpB,KAAK,KAAK,EAH1C,EAIE;AACD,mBAAOgB,MAAP;AACA;;AAED,cAAIhB,KAAK,KAAK,IAAd,EAAoB;AACnB,mBAAO,CACN,GAAGgB,MADG,EAENK,MAAM,CAACN,GAAD,EAAMF,OAAN,CAFA,CAAP;AAIA;;AAED,iBAAO,CACN,GAAGG,MADG,EAEN,CAACK,MAAM,CAACN,GAAD,EAAMF,OAAN,CAAP,EAAuB,GAAvB,EAA4BQ,MAAM,CAACrB,KAAD,EAAQa,OAAR,CAAlC,EAAoDS,IAApD,CAAyD,EAAzD,CAFM,CAAP;AAIA,SApBD;AAqBA;AA3HF;AA6HA;;AAED,SAASG,oBAAT,CAA8BZ,OAA9B,EAAuC;AACtC,MAAIG,MAAJ;;AAEA,UAAQH,OAAO,CAACC,WAAhB;AACC,SAAK,OAAL;AAAc;AACb,eAAO,CAACC,GAAD,EAAMf,KAAN,EAAa0B,WAAb,KAA6B;AACnCV,UAAAA,MAAM,GAAG,YAAYW,IAAZ,CAAiBZ,GAAjB,CAAT;AAEAA,UAAAA,GAAG,GAAGA,GAAG,CAACV,OAAJ,CAAY,SAAZ,EAAuB,EAAvB,CAAN;;AAEA,cAAI,CAACW,MAAL,EAAa;AACZU,YAAAA,WAAW,CAACX,GAAD,CAAX,GAAmBf,KAAnB;AACA;AACA;;AAED,cAAI0B,WAAW,CAACX,GAAD,CAAX,KAAqBd,SAAzB,EAAoC;AACnCyB,YAAAA,WAAW,CAACX,GAAD,CAAX,GAAmB,EAAnB;AACA;;AAEDW,UAAAA,WAAW,CAACX,GAAD,CAAX,CAAiBC,MAAM,CAAC,CAAD,CAAvB,IAA8BhB,KAA9B;AACA,SAfD;AAgBA;;AAED,SAAK,SAAL;AAAgB;AACf,eAAO,CAACe,GAAD,EAAMf,KAAN,EAAa0B,WAAb,KAA6B;AACnCV,UAAAA,MAAM,GAAG,SAASW,IAAT,CAAcZ,GAAd,CAAT;AACAA,UAAAA,GAAG,GAAGA,GAAG,CAACV,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAN;;AAEA,cAAI,CAACW,MAAL,EAAa;AACZU,YAAAA,WAAW,CAACX,GAAD,CAAX,GAAmBf,KAAnB;AACA;AACA;;AAED,cAAI0B,WAAW,CAACX,GAAD,CAAX,KAAqBd,SAAzB,EAAoC;AACnCyB,YAAAA,WAAW,CAACX,GAAD,CAAX,GAAmB,CAACf,KAAD,CAAnB;AACA;AACA;;AAED0B,UAAAA,WAAW,CAACX,GAAD,CAAX,GAAmB,CAAC,GAAGW,WAAW,CAACX,GAAD,CAAf,EAAsBf,KAAtB,CAAnB;AACA,SAfD;AAgBA;;AAED,SAAK,sBAAL;AAA6B;AAC5B,eAAO,CAACe,GAAD,EAAMf,KAAN,EAAa0B,WAAb,KAA6B;AACnCV,UAAAA,MAAM,GAAG,WAAWW,IAAX,CAAgBZ,GAAhB,CAAT;AACAA,UAAAA,GAAG,GAAGA,GAAG,CAACV,OAAJ,CAAY,QAAZ,EAAsB,EAAtB,CAAN;;AAEA,cAAI,CAACW,MAAL,EAAa;AACZU,YAAAA,WAAW,CAACX,GAAD,CAAX,GAAmBf,KAAnB;AACA;AACA;;AAED,cAAI0B,WAAW,CAACX,GAAD,CAAX,KAAqBd,SAAzB,EAAoC;AACnCyB,YAAAA,WAAW,CAACX,GAAD,CAAX,GAAmB,CAACf,KAAD,CAAnB;AACA;AACA;;AAED0B,UAAAA,WAAW,CAACX,GAAD,CAAX,GAAmB,CAAC,GAAGW,WAAW,CAACX,GAAD,CAAf,EAAsBf,KAAtB,CAAnB;AACA,SAfD;AAgBA;;AAED,SAAK,OAAL;AACA,SAAK,WAAL;AAAkB;AACjB,eAAO,CAACe,GAAD,EAAMf,KAAN,EAAa0B,WAAb,KAA6B;AACnC,gBAAME,OAAO,GAAG,OAAO5B,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAAC6B,QAAN,CAAehB,OAAO,CAACW,oBAAvB,CAA7C;AACA,gBAAMM,cAAc,GAAI,OAAO9B,KAAP,KAAiB,QAAjB,IAA6B,CAAC4B,OAA9B,IAAyCG,MAAM,CAAC/B,KAAD,EAAQa,OAAR,CAAN,CAAuBgB,QAAvB,CAAgChB,OAAO,CAACW,oBAAxC,CAAjE;AACAxB,UAAAA,KAAK,GAAG8B,cAAc,GAAGC,MAAM,CAAC/B,KAAD,EAAQa,OAAR,CAAT,GAA4Bb,KAAlD;AACA,gBAAMgC,QAAQ,GAAGJ,OAAO,IAAIE,cAAX,GAA4B9B,KAAK,CAACiC,KAAN,CAAYpB,OAAO,CAACW,oBAApB,EAA0CU,GAA1C,CAA8CC,IAAI,IAAIJ,MAAM,CAACI,IAAD,EAAOtB,OAAP,CAA5D,CAA5B,GAA4Gb,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB+B,MAAM,CAAC/B,KAAD,EAAQa,OAAR,CAA5J;AACAa,UAAAA,WAAW,CAACX,GAAD,CAAX,GAAmBiB,QAAnB;AACA,SAND;AAOA;;AAED,SAAK,mBAAL;AAA0B;AACzB,eAAO,CAACjB,GAAD,EAAMf,KAAN,EAAa0B,WAAb,KAA6B;AACnC,gBAAME,OAAO,GAAG,SAASQ,IAAT,CAAcrB,GAAd,CAAhB;AACAA,UAAAA,GAAG,GAAGA,GAAG,CAACV,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAN;;AAEA,cAAI,CAACuB,OAAL,EAAc;AACbF,YAAAA,WAAW,CAACX,GAAD,CAAX,GAAmBf,KAAK,GAAG+B,MAAM,CAAC/B,KAAD,EAAQa,OAAR,CAAT,GAA4Bb,KAApD;AACA;AACA;;AAED,gBAAMqC,UAAU,GAAGrC,KAAK,KAAK,IAAV,GAChB,EADgB,GAEhBA,KAAK,CAACiC,KAAN,CAAYpB,OAAO,CAACW,oBAApB,EAA0CU,GAA1C,CAA8CC,IAAI,IAAIJ,MAAM,CAACI,IAAD,EAAOtB,OAAP,CAA5D,CAFH;;AAIA,cAAIa,WAAW,CAACX,GAAD,CAAX,KAAqBd,SAAzB,EAAoC;AACnCyB,YAAAA,WAAW,CAACX,GAAD,CAAX,GAAmBsB,UAAnB;AACA;AACA;;AAEDX,UAAAA,WAAW,CAACX,GAAD,CAAX,GAAmB,CAAC,GAAGW,WAAW,CAACX,GAAD,CAAf,EAAsB,GAAGsB,UAAzB,CAAnB;AACA,SAnBD;AAoBA;;AAED;AAAS;AACR,eAAO,CAACtB,GAAD,EAAMf,KAAN,EAAa0B,WAAb,KAA6B;AACnC,cAAIA,WAAW,CAACX,GAAD,CAAX,KAAqBd,SAAzB,EAAoC;AACnCyB,YAAAA,WAAW,CAACX,GAAD,CAAX,GAAmBf,KAAnB;AACA;AACA;;AAED0B,UAAAA,WAAW,CAACX,GAAD,CAAX,GAAmB,CAAC,GAAG,CAACW,WAAW,CAACX,GAAD,CAAZ,EAAmBuB,IAAnB,EAAJ,EAA+BtC,KAA/B,CAAnB;AACA,SAPD;AAQA;AArGF;AAuGA;;AAED,SAASuC,4BAAT,CAAsCvC,KAAtC,EAA6C;AAC5C,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACkB,MAAN,KAAiB,CAAlD,EAAqD;AACpD,UAAM,IAAIsB,SAAJ,CAAc,sDAAd,CAAN;AACA;AACD;;AAED,SAASnB,MAAT,CAAgBrB,KAAhB,EAAuBa,OAAvB,EAAgC;AAC/B,MAAIA,OAAO,CAACQ,MAAZ,EAAoB;AACnB,WAAOR,OAAO,CAAC4B,MAAR,GAAiBvC,eAAe,CAACF,KAAD,CAAhC,GAA0CI,kBAAkB,CAACJ,KAAD,CAAnE;AACA;;AAED,SAAOA,KAAP;AACA;;AAED,SAAS+B,MAAT,CAAgB/B,KAAhB,EAAuBa,OAAvB,EAAgC;AAC/B,MAAIA,OAAO,CAACkB,MAAZ,EAAoB;AACnB,WAAOnC,eAAe,CAACI,KAAD,CAAtB;AACA;;AAED,SAAOA,KAAP;AACA;;AAED,SAAS0C,UAAT,CAAoBC,KAApB,EAA2B;AAC1B,MAAIC,KAAK,CAAChB,OAAN,CAAce,KAAd,CAAJ,EAA0B;AACzB,WAAOA,KAAK,CAACE,IAAN,EAAP;AACA;;AAED,MAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC9B,WAAOD,UAAU,CAACI,MAAM,CAACC,IAAP,CAAYJ,KAAZ,CAAD,CAAV,CACLE,IADK,CACA,CAACG,CAAD,EAAIC,CAAJ,KAAUC,MAAM,CAACF,CAAD,CAAN,GAAYE,MAAM,CAACD,CAAD,CAD5B,EAELf,GAFK,CAEDnB,GAAG,IAAI4B,KAAK,CAAC5B,GAAD,CAFX,CAAP;AAGA;;AAED,SAAO4B,KAAP;AACA;;AAED,SAASQ,UAAT,CAAoBR,KAApB,EAA2B;AAC1B,QAAMS,SAAS,GAAGT,KAAK,CAACU,OAAN,CAAc,GAAd,CAAlB;;AACA,MAAID,SAAS,KAAK,CAAC,CAAnB,EAAsB;AACrBT,IAAAA,KAAK,GAAGA,KAAK,CAACW,KAAN,CAAY,CAAZ,EAAeF,SAAf,CAAR;AACA;;AAED,SAAOT,KAAP;AACA;;AAED,SAASY,OAAT,CAAiBC,GAAjB,EAAsB;AACrB,MAAIC,IAAI,GAAG,EAAX;AACA,QAAML,SAAS,GAAGI,GAAG,CAACH,OAAJ,CAAY,GAAZ,CAAlB;;AACA,MAAID,SAAS,KAAK,CAAC,CAAnB,EAAsB;AACrBK,IAAAA,IAAI,GAAGD,GAAG,CAACF,KAAJ,CAAUF,SAAV,CAAP;AACA;;AAED,SAAOK,IAAP;AACA;;AAED,SAASC,UAAT,CAAoB1D,KAApB,EAA2Ba,OAA3B,EAAoC;AACnC,MAAIA,OAAO,CAAC8C,YAAR,IAAwB,CAACT,MAAM,CAACU,KAAP,CAAaV,MAAM,CAAClD,KAAD,CAAnB,CAAzB,IAAyD,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAAC6D,IAAN,OAAiB,EAA3G,EAAgH;AAC/G7D,IAAAA,KAAK,GAAGkD,MAAM,CAAClD,KAAD,CAAd;AACA,GAFD,MAEO,IAAIa,OAAO,CAACiD,aAAR,IAAyB9D,KAAK,KAAK,IAAnC,KAA4CA,KAAK,CAAC+D,WAAN,OAAwB,MAAxB,IAAkC/D,KAAK,CAAC+D,WAAN,OAAwB,OAAtG,CAAJ,EAAoH;AAC1H/D,IAAAA,KAAK,GAAGA,KAAK,CAAC+D,WAAN,OAAwB,MAAhC;AACA;;AAED,SAAO/D,KAAP;AACA;;AAED,OAAO,SAASgE,OAAT,CAAiBrB,KAAjB,EAAwB;AAC9BA,EAAAA,KAAK,GAAGQ,UAAU,CAACR,KAAD,CAAlB;AACA,QAAMsB,UAAU,GAAGtB,KAAK,CAACU,OAAN,CAAc,GAAd,CAAnB;;AACA,MAAIY,UAAU,KAAK,CAAC,CAApB,EAAuB;AACtB,WAAO,EAAP;AACA;;AAED,SAAOtB,KAAK,CAACW,KAAN,CAAYW,UAAU,GAAG,CAAzB,CAAP;AACA;AAED,OAAO,SAASC,KAAT,CAAeC,KAAf,EAAsBtD,OAAtB,EAA+B;AACrCA,EAAAA,OAAO,GAAG;AACTkB,IAAAA,MAAM,EAAE,IADC;AAETc,IAAAA,IAAI,EAAE,IAFG;AAGT/B,IAAAA,WAAW,EAAE,MAHJ;AAITU,IAAAA,oBAAoB,EAAE,GAJb;AAKTmC,IAAAA,YAAY,EAAE,KALL;AAMTG,IAAAA,aAAa,EAAE,KANN;AAOT,OAAGjD;AAPM,GAAV;AAUA0B,EAAAA,4BAA4B,CAAC1B,OAAO,CAACW,oBAAT,CAA5B;AAEA,QAAM4C,SAAS,GAAG3C,oBAAoB,CAACZ,OAAD,CAAtC,CAbqC,CAerC;;AACA,QAAMwD,WAAW,GAAGvB,MAAM,CAACwB,MAAP,CAAc,IAAd,CAApB;;AAEA,MAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AAC9B,WAAOE,WAAP;AACA;;AAEDF,EAAAA,KAAK,GAAGA,KAAK,CAACN,IAAN,GAAaxD,OAAb,CAAqB,QAArB,EAA+B,EAA/B,CAAR;;AAEA,MAAI,CAAC8D,KAAL,EAAY;AACX,WAAOE,WAAP;AACA;;AAED,OAAK,MAAME,SAAX,IAAwBJ,KAAK,CAAClC,KAAN,CAAY,GAAZ,CAAxB,EAA0C;AACzC,QAAIsC,SAAS,KAAK,EAAlB,EAAsB;AACrB;AACA;;AAED,UAAMC,UAAU,GAAG3D,OAAO,CAACkB,MAAR,GAAiBwC,SAAS,CAAClE,OAAV,CAAkB,KAAlB,EAAyB,GAAzB,CAAjB,GAAiDkE,SAApE;AAEA,QAAI,CAACxD,GAAD,EAAMf,KAAN,IAAeH,YAAY,CAAC2E,UAAD,EAAa,GAAb,CAA/B;;AAEA,QAAIzD,GAAG,KAAKd,SAAZ,EAAuB;AACtBc,MAAAA,GAAG,GAAGyD,UAAN;AACA,KAXwC,CAazC;AACA;;;AACAxE,IAAAA,KAAK,GAAGA,KAAK,KAAKC,SAAV,GAAsB,IAAtB,GAA8B,CAAC,OAAD,EAAU,WAAV,EAAuB,mBAAvB,EAA4C4B,QAA5C,CAAqDhB,OAAO,CAACC,WAA7D,IAA4Ed,KAA5E,GAAoF+B,MAAM,CAAC/B,KAAD,EAAQa,OAAR,CAAhI;AACAuD,IAAAA,SAAS,CAACrC,MAAM,CAAChB,GAAD,EAAMF,OAAN,CAAP,EAAuBb,KAAvB,EAA8BqE,WAA9B,CAAT;AACA;;AAED,OAAK,MAAM,CAACtD,GAAD,EAAMf,KAAN,CAAX,IAA2B8C,MAAM,CAAC2B,OAAP,CAAeJ,WAAf,CAA3B,EAAwD;AACvD,QAAI,OAAOrE,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AAChD,WAAK,MAAM,CAAC0E,IAAD,EAAOC,MAAP,CAAX,IAA6B7B,MAAM,CAAC2B,OAAP,CAAezE,KAAf,CAA7B,EAAoD;AACnDA,QAAAA,KAAK,CAAC0E,IAAD,CAAL,GAAchB,UAAU,CAACiB,MAAD,EAAS9D,OAAT,CAAxB;AACA;AACD,KAJD,MAIO;AACNwD,MAAAA,WAAW,CAACtD,GAAD,CAAX,GAAmB2C,UAAU,CAAC1D,KAAD,EAAQa,OAAR,CAA7B;AACA;AACD;;AAED,MAAIA,OAAO,CAACgC,IAAR,KAAiB,KAArB,EAA4B;AAC3B,WAAOwB,WAAP;AACA,GA3DoC,CA6DrC;AACA;;;AACA,SAAO,CAACxD,OAAO,CAACgC,IAAR,KAAiB,IAAjB,GAAwBC,MAAM,CAACC,IAAP,CAAYsB,WAAZ,EAAyBxB,IAAzB,EAAxB,GAA0DC,MAAM,CAACC,IAAP,CAAYsB,WAAZ,EAAyBxB,IAAzB,CAA8BhC,OAAO,CAACgC,IAAtC,CAA3D,EAAwG+B,MAAxG,CAA+G,CAAC5D,MAAD,EAASD,GAAT,KAAiB;AACtI,UAAMf,KAAK,GAAGqE,WAAW,CAACtD,GAAD,CAAzB;;AACA,QAAI8D,OAAO,CAAC7E,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+C,CAAC4C,KAAK,CAAChB,OAAN,CAAc5B,KAAd,CAApD,EAA0E;AACzE;AACAgB,MAAAA,MAAM,CAACD,GAAD,CAAN,GAAc2B,UAAU,CAAC1C,KAAD,CAAxB;AACA,KAHD,MAGO;AACNgB,MAAAA,MAAM,CAACD,GAAD,CAAN,GAAcf,KAAd;AACA;;AAED,WAAOgB,MAAP;AACA,GAVM,EAUJ8B,MAAM,CAACwB,MAAP,CAAc,IAAd,CAVI,CAAP;AAWA;AAED,OAAO,SAASQ,SAAT,CAAmBC,MAAnB,EAA2BlE,OAA3B,EAAoC;AAC1C,MAAI,CAACkE,MAAL,EAAa;AACZ,WAAO,EAAP;AACA;;AAEDlE,EAAAA,OAAO,GAAG;AAACQ,IAAAA,MAAM,EAAE,IAAT;AACToB,IAAAA,MAAM,EAAE,IADC;AAET3B,IAAAA,WAAW,EAAE,MAFJ;AAGTU,IAAAA,oBAAoB,EAAE,GAHb;AAGkB,OAAGX;AAHrB,GAAV;AAKA0B,EAAAA,4BAA4B,CAAC1B,OAAO,CAACW,oBAAT,CAA5B;;AAEA,QAAMwD,YAAY,GAAGjE,GAAG,IACtBF,OAAO,CAACM,QAAR,IAAoBpB,iBAAiB,CAACgF,MAAM,CAAChE,GAAD,CAAP,CAAtC,IACIF,OAAO,CAACO,eAAR,IAA2B2D,MAAM,CAAChE,GAAD,CAAN,KAAgB,EAFhD;;AAKA,QAAMqD,SAAS,GAAGxD,qBAAqB,CAACC,OAAD,CAAvC;AAEA,QAAMoE,UAAU,GAAG,EAAnB;;AAEA,OAAK,MAAM,CAAClE,GAAD,EAAMf,KAAN,CAAX,IAA2B8C,MAAM,CAAC2B,OAAP,CAAeM,MAAf,CAA3B,EAAmD;AAClD,QAAI,CAACC,YAAY,CAACjE,GAAD,CAAjB,EAAwB;AACvBkE,MAAAA,UAAU,CAAClE,GAAD,CAAV,GAAkBf,KAAlB;AACA;AACD;;AAED,QAAM+C,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYkC,UAAZ,CAAb;;AAEA,MAAIpE,OAAO,CAACgC,IAAR,KAAiB,KAArB,EAA4B;AAC3BE,IAAAA,IAAI,CAACF,IAAL,CAAUhC,OAAO,CAACgC,IAAlB;AACA;;AAED,SAAOE,IAAI,CAACb,GAAL,CAASnB,GAAG,IAAI;AACtB,UAAMf,KAAK,GAAG+E,MAAM,CAAChE,GAAD,CAApB;;AAEA,QAAIf,KAAK,KAAKC,SAAd,EAAyB;AACxB,aAAO,EAAP;AACA;;AAED,QAAID,KAAK,KAAK,IAAd,EAAoB;AACnB,aAAOqB,MAAM,CAACN,GAAD,EAAMF,OAAN,CAAb;AACA;;AAED,QAAI+B,KAAK,CAAChB,OAAN,CAAc5B,KAAd,CAAJ,EAA0B;AACzB,UAAIA,KAAK,CAACkB,MAAN,KAAiB,CAAjB,IAAsBL,OAAO,CAACC,WAAR,KAAwB,mBAAlD,EAAuE;AACtE,eAAOO,MAAM,CAACN,GAAD,EAAMF,OAAN,CAAN,GAAuB,IAA9B;AACA;;AAED,aAAOb,KAAK,CACV4E,MADK,CACER,SAAS,CAACrD,GAAD,CADX,EACkB,EADlB,EAELO,IAFK,CAEA,GAFA,CAAP;AAGA;;AAED,WAAOD,MAAM,CAACN,GAAD,EAAMF,OAAN,CAAN,GAAuB,GAAvB,GAA6BQ,MAAM,CAACrB,KAAD,EAAQa,OAAR,CAA1C;AACA,GAtBM,EAsBJqE,MAtBI,CAsBG5E,CAAC,IAAIA,CAAC,CAACY,MAAF,GAAW,CAtBnB,EAsBsBI,IAtBtB,CAsB2B,GAtB3B,CAAP;AAuBA;AAED,OAAO,SAAS6D,QAAT,CAAkB3B,GAAlB,EAAuB3C,OAAvB,EAAgC;AACtCA,EAAAA,OAAO,GAAG;AACTkB,IAAAA,MAAM,EAAE,IADC;AAET,OAAGlB;AAFM,GAAV;AAKA,MAAI,CAACuE,IAAD,EAAO3B,IAAP,IAAe5D,YAAY,CAAC2D,GAAD,EAAM,GAAN,CAA/B;;AAEA,MAAI4B,IAAI,KAAKnF,SAAb,EAAwB;AACvBmF,IAAAA,IAAI,GAAG5B,GAAP;AACA;;AAED,SAAO;AACNA,IAAAA,GAAG,EAAE4B,IAAI,EAAEnD,KAAN,CAAY,GAAZ,IAAmB,CAAnB,KAAyB,EADxB;AAENkC,IAAAA,KAAK,EAAED,KAAK,CAACF,OAAO,CAACR,GAAD,CAAR,EAAe3C,OAAf,CAFN;AAGN,QAAIA,OAAO,IAAIA,OAAO,CAACwE,uBAAnB,IAA8C5B,IAA9C,GAAqD;AAAC6B,MAAAA,kBAAkB,EAAEvD,MAAM,CAAC0B,IAAD,EAAO5C,OAAP;AAA3B,KAArD,GAAmG,EAAvG;AAHM,GAAP;AAKA;AAED,OAAO,SAAS0E,YAAT,CAAsBR,MAAtB,EAA8BlE,OAA9B,EAAuC;AAC7CA,EAAAA,OAAO,GAAG;AACTQ,IAAAA,MAAM,EAAE,IADC;AAEToB,IAAAA,MAAM,EAAE,IAFC;AAGT,KAAC/B,wBAAD,GAA4B,IAHnB;AAIT,OAAGG;AAJM,GAAV;AAOA,QAAM2C,GAAG,GAAGL,UAAU,CAAC4B,MAAM,CAACvB,GAAR,CAAV,CAAuBvB,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,KAAwC,EAApD;AACA,QAAMuD,YAAY,GAAGxB,OAAO,CAACe,MAAM,CAACvB,GAAR,CAA5B;AAEA,QAAMW,KAAK,GAAG,EACb,GAAGD,KAAK,CAACsB,YAAD,EAAe;AAAC3C,MAAAA,IAAI,EAAE;AAAP,KAAf,CADK;AAEb,OAAGkC,MAAM,CAACZ;AAFG,GAAd;AAKA,MAAIsB,WAAW,GAAGX,SAAS,CAACX,KAAD,EAAQtD,OAAR,CAA3B;;AACA,MAAI4E,WAAJ,EAAiB;AAChBA,IAAAA,WAAW,GAAI,IAAGA,WAAY,EAA9B;AACA;;AAED,MAAIhC,IAAI,GAAGF,OAAO,CAACwB,MAAM,CAACvB,GAAR,CAAlB;;AACA,MAAIuB,MAAM,CAACO,kBAAX,EAA+B;AAC9B,UAAMI,0BAA0B,GAAG,IAAIC,GAAJ,CAAQnC,GAAR,CAAnC;AACAkC,IAAAA,0BAA0B,CAACjC,IAA3B,GAAkCsB,MAAM,CAACO,kBAAzC;AACA7B,IAAAA,IAAI,GAAG5C,OAAO,CAACH,wBAAD,CAAP,GAAoCgF,0BAA0B,CAACjC,IAA/D,GAAuE,IAAGsB,MAAM,CAACO,kBAAmB,EAA3G;AACA;;AAED,SAAQ,GAAE9B,GAAI,GAAEiC,WAAY,GAAEhC,IAAK,EAAnC;AACA;AAED,OAAO,SAASmC,IAAT,CAAcjD,KAAd,EAAqBuC,MAArB,EAA6BrE,OAA7B,EAAsC;AAC5CA,EAAAA,OAAO,GAAG;AACTwE,IAAAA,uBAAuB,EAAE,IADhB;AAET,KAAC3E,wBAAD,GAA4B,KAFnB;AAGT,OAAGG;AAHM,GAAV;AAMA,QAAM;AAAC2C,IAAAA,GAAD;AAAMW,IAAAA,KAAN;AAAamB,IAAAA;AAAb,MAAmCH,QAAQ,CAACxC,KAAD,EAAQ9B,OAAR,CAAjD;AAEA,SAAO0E,YAAY,CAAC;AACnB/B,IAAAA,GADmB;AAEnBW,IAAAA,KAAK,EAAErE,WAAW,CAACqE,KAAD,EAAQe,MAAR,CAFC;AAGnBI,IAAAA;AAHmB,GAAD,EAIhBzE,OAJgB,CAAnB;AAKA;AAED,OAAO,SAASgF,OAAT,CAAiBlD,KAAjB,EAAwBuC,MAAxB,EAAgCrE,OAAhC,EAAyC;AAC/C,QAAMiF,eAAe,GAAGlD,KAAK,CAAChB,OAAN,CAAcsD,MAAd,IAAwBnE,GAAG,IAAI,CAACmE,MAAM,CAACrD,QAAP,CAAgBd,GAAhB,CAAhC,GAAuD,CAACA,GAAD,EAAMf,KAAN,KAAgB,CAACkF,MAAM,CAACnE,GAAD,EAAMf,KAAN,CAAtG;AAEA,SAAO4F,IAAI,CAACjD,KAAD,EAAQmD,eAAR,EAAyBjF,OAAzB,CAAX;AACA","sourcesContent":["import decodeComponent from 'decode-uri-component';\nimport splitOnFirst from 'split-on-first';\nimport {includeKeys} from 'filter-obj';\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\n// eslint-disable-next-line unicorn/prefer-code-point\nconst strictUriEncode = string => encodeURIComponent(string).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result, [encode(key, options), '[', index, ']'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), '[]'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[]=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), ':list='].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), ':list=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator'\n\t\t\t\t? '[]='\n\t\t\t\t: '=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\tencode(key, options),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : (value === null ? value : decode(value, options));\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null\n\t\t\t\t\t? []\n\t\t\t\t\t: value.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], ...arrayValue];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...[accumulator[key]].flat(), value];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nexport function extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nexport function parse(query, options) {\n\toptions = {\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false,\n\t\t...options,\n\t};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst returnValue = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn returnValue;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn returnValue;\n\t}\n\n\tfor (const parameter of query.split('&')) {\n\t\tif (parameter === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst parameter_ = options.decode ? parameter.replace(/\\+/g, ' ') : parameter;\n\n\t\tlet [key, value] = splitOnFirst(parameter_, '=');\n\n\t\tif (key === undefined) {\n\t\t\tkey = parameter_;\n\t\t}\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : (['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options));\n\t\tformatter(decode(key, options), value, returnValue);\n\t}\n\n\tfor (const [key, value] of Object.entries(returnValue)) {\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const [key2, value2] of Object.entries(value)) {\n\t\t\t\tvalue[key2] = parseValue(value2, options);\n\t\t\t}\n\t\t} else {\n\t\t\treturnValue[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn returnValue;\n\t}\n\n\t// TODO: Remove the use of `reduce`.\n\t// eslint-disable-next-line unicorn/no-array-reduce\n\treturn (options.sort === true ? Object.keys(returnValue).sort() : Object.keys(returnValue).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = returnValue[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexport function stringify(object, options) {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = {encode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',', ...options};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key]))\n\t\t|| (options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = value;\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n}\n\nexport function parseUrl(url, options) {\n\toptions = {\n\t\tdecode: true,\n\t\t...options,\n\t};\n\n\tlet [url_, hash] = splitOnFirst(url, '#');\n\n\tif (url_ === undefined) {\n\t\turl_ = url;\n\t}\n\n\treturn {\n\t\turl: url_?.split('?')?.[0] ?? '',\n\t\tquery: parse(extract(url), options),\n\t\t...(options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}),\n\t};\n}\n\nexport function stringifyUrl(object, options) {\n\toptions = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true,\n\t\t...options,\n\t};\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = extract(object.url);\n\n\tconst query = {\n\t\t...parse(queryFromUrl, {sort: false}),\n\t\t...object.query,\n\t};\n\n\tlet queryString = stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\tconst urlObjectForFragmentEncode = new URL(url);\n\t\turlObjectForFragmentEncode.hash = object.fragmentIdentifier;\n\t\thash = options[encodeFragmentIdentifier] ? urlObjectForFragmentEncode.hash : `#${object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n}\n\nexport function pick(input, filter, options) {\n\toptions = {\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false,\n\t\t...options,\n\t};\n\n\tconst {url, query, fragmentIdentifier} = parseUrl(input, options);\n\n\treturn stringifyUrl({\n\t\turl,\n\t\tquery: includeKeys(query, filter),\n\t\tfragmentIdentifier,\n\t}, options);\n}\n\nexport function exclude(input, filter, options) {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn pick(input, exclusionFilter, options);\n}\n"]},"metadata":{},"sourceType":"module"}