{"ast":null,"code":"'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport buildURL from './../helpers/buildURL.js';\nimport { getProxyForUrl } from 'proxy-from-env';\nimport http from 'http';\nimport https from 'https';\nimport util from 'util';\nimport followRedirects from 'follow-redirects';\nimport zlib from 'zlib';\nimport { VERSION } from '../env/data.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport platform from '../platform/index.js';\nimport fromDataURI from '../helpers/fromDataURI.js';\nimport stream from 'stream';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport AxiosTransformStream from '../helpers/AxiosTransformStream.js';\nimport EventEmitter from 'events';\nimport formDataToStream from \"../helpers/formDataToStream.js\";\nimport readBlob from \"../helpers/readBlob.js\";\nimport ZlibHeaderTransformStream from '../helpers/ZlibHeaderTransformStream.js';\nconst zlibOptions = {\n  flush: zlib.constants.Z_SYNC_FLUSH,\n  finishFlush: zlib.constants.Z_SYNC_FLUSH\n};\nconst brotliOptions = {\n  flush: zlib.constants.BROTLI_OPERATION_FLUSH,\n  finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH\n};\nconst isBrotliSupported = utils.isFunction(zlib.createBrotliDecompress);\nconst {\n  http: httpFollow,\n  https: httpsFollow\n} = followRedirects;\nconst isHttps = /https:?/;\nconst supportedProtocols = platform.protocols.map(protocol => {\n  return protocol + ':';\n});\n/**\n * If the proxy or config beforeRedirects functions are defined, call them with the options\n * object.\n *\n * @param {Object<string, any>} options - The options object that was passed to the request.\n *\n * @returns {Object<string, any>}\n */\n\nfunction dispatchBeforeRedirect(options) {\n  if (options.beforeRedirects.proxy) {\n    options.beforeRedirects.proxy(options);\n  }\n\n  if (options.beforeRedirects.config) {\n    options.beforeRedirects.config(options);\n  }\n}\n/**\n * If the proxy or config afterRedirects functions are defined, call them with the options\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} configProxy configuration from Axios options object\n * @param {string} location\n *\n * @returns {http.ClientRequestArgs}\n */\n\n\nfunction setProxy(options, configProxy, location) {\n  let proxy = configProxy;\n\n  if (!proxy && proxy !== false) {\n    const proxyUrl = getProxyForUrl(location);\n\n    if (proxyUrl) {\n      proxy = new URL(proxyUrl);\n    }\n  }\n\n  if (proxy) {\n    // Basic proxy authorization\n    if (proxy.username) {\n      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');\n    }\n\n    if (proxy.auth) {\n      // Support proxy auth object form\n      if (proxy.auth.username || proxy.auth.password) {\n        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');\n      }\n\n      const base64 = Buffer.from(proxy.auth, 'utf8').toString('base64');\n      options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n    }\n\n    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');\n    const proxyHost = proxy.hostname || proxy.host;\n    options.hostname = proxyHost; // Replace 'host' since options is not a URL object\n\n    options.host = proxyHost;\n    options.port = proxy.port;\n    options.path = location;\n\n    if (proxy.protocol) {\n      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : `${proxy.protocol}:`;\n    }\n  }\n\n  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {\n    // Configure proxy for redirected request, passing the original config proxy to apply\n    // the exact same logic as if the redirected request was performed by axios directly.\n    setProxy(redirectOptions, configProxy, redirectOptions.href);\n  };\n}\n\nconst isHttpAdapterSupported = typeof process !== 'undefined' && utils.kindOf(process) === 'process';\n/*eslint consistent-return:0*/\n\nexport default isHttpAdapterSupported && function httpAdapter(config) {\n  /*eslint no-async-promise-executor:0*/\n  return new Promise(async function dispatchHttpRequest(resolvePromise, rejectPromise) {\n    let data = config.data;\n    const responseType = config.responseType;\n    const responseEncoding = config.responseEncoding;\n    const method = config.method.toUpperCase();\n    let isFinished;\n    let isDone;\n    let rejected = false;\n    let req; // temporary internal emitter until the AxiosRequest class will be implemented\n\n    const emitter = new EventEmitter();\n\n    function onFinished() {\n      if (isFinished) return;\n      isFinished = true;\n\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(abort);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', abort);\n      }\n\n      emitter.removeAllListeners();\n    }\n\n    function done(value, isRejected) {\n      if (isDone) return;\n      isDone = true;\n\n      if (isRejected) {\n        rejected = true;\n        onFinished();\n      }\n\n      isRejected ? rejectPromise(value) : resolvePromise(value);\n    }\n\n    const resolve = function resolve(value) {\n      done(value);\n    };\n\n    const reject = function reject(value) {\n      done(value, true);\n    };\n\n    function abort(reason) {\n      emitter.emit('abort', !reason || reason.type ? new CanceledError(null, config, req) : reason);\n    }\n\n    emitter.once('abort', reject);\n\n    if (config.cancelToken || config.signal) {\n      config.cancelToken && config.cancelToken.subscribe(abort);\n\n      if (config.signal) {\n        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);\n      }\n    } // Parse url\n\n\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    const parsed = new URL(fullPath, 'http://localhost');\n    const protocol = parsed.protocol || supportedProtocols[0];\n\n    if (protocol === 'data:') {\n      let convertedData;\n\n      if (method !== 'GET') {\n        return settle(resolve, reject, {\n          status: 405,\n          statusText: 'method not allowed',\n          headers: {},\n          config\n        });\n      }\n\n      try {\n        convertedData = fromDataURI(config.url, responseType === 'blob', {\n          Blob: config.env && config.env.Blob\n        });\n      } catch (err) {\n        throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);\n      }\n\n      if (responseType === 'text') {\n        convertedData = convertedData.toString(responseEncoding);\n\n        if (!responseEncoding || responseEncoding === 'utf8') {\n          convertedData = utils.stripBOM(convertedData);\n        }\n      } else if (responseType === 'stream') {\n        convertedData = stream.Readable.from(convertedData);\n      }\n\n      return settle(resolve, reject, {\n        data: convertedData,\n        status: 200,\n        statusText: 'OK',\n        headers: new AxiosHeaders(),\n        config\n      });\n    }\n\n    if (supportedProtocols.indexOf(protocol) === -1) {\n      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));\n    }\n\n    const headers = AxiosHeaders.from(config.headers).normalize(); // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    // User-Agent is specified; handle case where no UA header is desired\n    // Only set header if it hasn't been set in config\n\n    headers.set('User-Agent', 'axios/' + VERSION, false);\n    const onDownloadProgress = config.onDownloadProgress;\n    const onUploadProgress = config.onUploadProgress;\n    const maxRate = config.maxRate;\n    let maxUploadRate = undefined;\n    let maxDownloadRate = undefined; // support for spec compliant FormData objects\n\n    if (utils.isSpecCompliantForm(data)) {\n      const userBoundary = headers.getContentType(/boundary=([-_\\w\\d]{10,70})/i);\n      data = formDataToStream(data, formHeaders => {\n        headers.set(formHeaders);\n      }, {\n        tag: `axios-${VERSION}-boundary`,\n        boundary: userBoundary && userBoundary[1] || undefined\n      }); // support for https://www.npmjs.com/package/form-data api\n    } else if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n      headers.set(data.getHeaders());\n\n      if (!headers.hasContentLength()) {\n        try {\n          const knownLength = await util.promisify(data.getLength).call(data);\n          headers.setContentLength(knownLength);\n          /*eslint no-empty:0*/\n        } catch (e) {}\n      }\n    } else if (utils.isBlob(data)) {\n      data.size && headers.setContentType(data.type || 'application/octet-stream');\n      headers.setContentLength(data.size || 0);\n      data = stream.Readable.from(readBlob(data));\n    } else if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {// Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));\n      } // Add Content-Length header if data exists\n\n\n      headers.setContentLength(data.length, false);\n\n      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));\n      }\n    }\n\n    const contentLength = utils.toFiniteNumber(headers.getContentLength());\n\n    if (utils.isArray(maxRate)) {\n      maxUploadRate = maxRate[0];\n      maxDownloadRate = maxRate[1];\n    } else {\n      maxUploadRate = maxDownloadRate = maxRate;\n    }\n\n    if (data && (onUploadProgress || maxUploadRate)) {\n      if (!utils.isStream(data)) {\n        data = stream.Readable.from(data, {\n          objectMode: false\n        });\n      }\n\n      data = stream.pipeline([data, new AxiosTransformStream({\n        length: contentLength,\n        maxRate: utils.toFiniteNumber(maxUploadRate)\n      })], utils.noop);\n      onUploadProgress && data.on('progress', progress => {\n        onUploadProgress(Object.assign(progress, {\n          upload: true\n        }));\n      });\n    } // HTTP basic authentication\n\n\n    let auth = undefined;\n\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n\n    if (!auth && parsed.username) {\n      const urlUsername = parsed.username;\n      const urlPassword = parsed.password;\n      auth = urlUsername + ':' + urlPassword;\n    }\n\n    auth && headers.delete('authorization');\n    let path;\n\n    try {\n      path = buildURL(parsed.pathname + parsed.search, config.params, config.paramsSerializer).replace(/^\\?/, '');\n    } catch (err) {\n      const customErr = new Error(err.message);\n      customErr.config = config;\n      customErr.url = config.url;\n      customErr.exists = true;\n      return reject(customErr);\n    }\n\n    headers.set('Accept-Encoding', 'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false);\n    const options = {\n      path,\n      method: method,\n      headers: headers.toJSON(),\n      agents: {\n        http: config.httpAgent,\n        https: config.httpsAgent\n      },\n      auth,\n      protocol,\n      beforeRedirect: dispatchBeforeRedirect,\n      beforeRedirects: {}\n    };\n\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname;\n      options.port = parsed.port;\n      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n\n    let transport;\n    const isHttpsRequest = isHttps.test(options.protocol);\n    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsRequest ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n\n      if (config.beforeRedirect) {\n        options.beforeRedirects.config = config.beforeRedirect;\n      }\n\n      transport = isHttpsRequest ? httpsFollow : httpFollow;\n    }\n\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    } else {\n      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited\n      options.maxBodyLength = Infinity;\n    }\n\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    } // Create the request\n\n\n    req = transport.request(options, function handleResponse(res) {\n      if (req.destroyed) return;\n      const streams = [res];\n      const responseLength = +res.headers['content-length'];\n\n      if (onDownloadProgress) {\n        const transformStream = new AxiosTransformStream({\n          length: utils.toFiniteNumber(responseLength),\n          maxRate: utils.toFiniteNumber(maxDownloadRate)\n        });\n        onDownloadProgress && transformStream.on('progress', progress => {\n          onDownloadProgress(Object.assign(progress, {\n            download: true\n          }));\n        });\n        streams.push(transformStream);\n      } // decompress the response body transparently if required\n\n\n      let responseStream = res; // return the last request in case of redirects\n\n      const lastRequest = res.req || req; // if decompress disabled we should not decompress\n\n      if (config.decompress !== false && res.headers['content-encoding']) {\n        // if no content, but headers still say that it is encoded,\n        // remove the header not confuse downstream operations\n        if (method === 'HEAD' || res.statusCode === 204) {\n          delete res.headers['content-encoding'];\n        }\n\n        switch (res.headers['content-encoding']) {\n          /*eslint default-case:0*/\n          case 'gzip':\n          case 'x-gzip':\n          case 'compress':\n          case 'x-compress':\n            // add the unzipper to the body stream processing pipeline\n            streams.push(zlib.createUnzip(zlibOptions)); // remove the content-encoding in order to not confuse downstream operations\n\n            delete res.headers['content-encoding'];\n            break;\n\n          case 'deflate':\n            streams.push(new ZlibHeaderTransformStream()); // add the unzipper to the body stream processing pipeline\n\n            streams.push(zlib.createUnzip(zlibOptions)); // remove the content-encoding in order to not confuse downstream operations\n\n            delete res.headers['content-encoding'];\n            break;\n\n          case 'br':\n            if (isBrotliSupported) {\n              streams.push(zlib.createBrotliDecompress(brotliOptions));\n              delete res.headers['content-encoding'];\n            }\n\n        }\n      }\n\n      responseStream = streams.length > 1 ? stream.pipeline(streams, utils.noop) : streams[0];\n      const offListeners = stream.finished(responseStream, () => {\n        offListeners();\n        onFinished();\n      });\n      const response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: new AxiosHeaders(res.headers),\n        config,\n        request: lastRequest\n      };\n\n      if (responseType === 'stream') {\n        response.data = responseStream;\n        settle(resolve, reject, response);\n      } else {\n        const responseBuffer = [];\n        let totalResponseBytes = 0;\n        responseStream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length; // make sure the content length is not over the maxContentLength if specified\n\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            // stream.destroy() emit aborted event before calling reject() on Node.js v16\n            rejected = true;\n            responseStream.destroy();\n            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n          }\n        });\n        responseStream.on('aborted', function handlerStreamAborted() {\n          if (rejected) {\n            return;\n          }\n\n          const err = new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest);\n          responseStream.destroy(err);\n          reject(err);\n        });\n        responseStream.on('error', function handleStreamError(err) {\n          if (req.destroyed) return;\n          reject(AxiosError.from(err, null, config, lastRequest));\n        });\n        responseStream.on('end', function handleStreamEnd() {\n          try {\n            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n\n            if (responseType !== 'arraybuffer') {\n              responseData = responseData.toString(responseEncoding);\n\n              if (!responseEncoding || responseEncoding === 'utf8') {\n                responseData = utils.stripBOM(responseData);\n              }\n            }\n\n            response.data = responseData;\n          } catch (err) {\n            reject(AxiosError.from(err, null, config, response.request, response));\n          }\n\n          settle(resolve, reject, response);\n        });\n      }\n\n      emitter.once('abort', err => {\n        if (!responseStream.destroyed) {\n          responseStream.emit('error', err);\n          responseStream.destroy();\n        }\n      });\n    });\n    emitter.once('abort', err => {\n      reject(err);\n      req.destroy(err);\n    }); // Handle errors\n\n    req.on('error', function handleRequestError(err) {\n      // @todo remove\n      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n      reject(AxiosError.from(err, null, config, req));\n    }); // set tcp keep alive to prevent drop connection by peer\n\n    req.on('socket', function handleRequestSocket(socket) {\n      // default interval of sending ack packet is 1 minute\n      socket.setKeepAlive(true, 1000 * 60);\n    }); // Handle request timeout\n\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      const timeout = parseInt(config.timeout, 10);\n\n      if (isNaN(timeout)) {\n        reject(new AxiosError('error trying to parse `config.timeout` to int', AxiosError.ERR_BAD_OPTION_VALUE, config, req));\n        return;\n      } // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devouring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n\n\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        if (isDone) return;\n        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n        const transitional = config.transitional || transitionalDefaults;\n\n        if (config.timeoutErrorMessage) {\n          timeoutErrorMessage = config.timeoutErrorMessage;\n        }\n\n        reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, req));\n        abort();\n      });\n    } // Send the request\n\n\n    if (utils.isStream(data)) {\n      let ended = false;\n      let errored = false;\n      data.on('end', () => {\n        ended = true;\n      });\n      data.once('error', err => {\n        errored = true;\n        req.destroy(err);\n      });\n      data.on('close', () => {\n        if (!ended && !errored) {\n          abort(new CanceledError('Request stream has been aborted', config, req));\n        }\n      });\n      data.pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n};\nexport const __setProxy = setProxy;","map":{"version":3,"sources":["D:/funix/NJS301x_1.0-A_VN Lập trình Web Back-End với NodeJS/assignment 02/Frontend Assignemnt 02 Admin App/node_modules/axios/lib/adapters/http.js"],"names":["utils","settle","buildFullPath","buildURL","getProxyForUrl","http","https","util","followRedirects","zlib","VERSION","transitionalDefaults","AxiosError","CanceledError","platform","fromDataURI","stream","AxiosHeaders","AxiosTransformStream","EventEmitter","formDataToStream","readBlob","ZlibHeaderTransformStream","zlibOptions","flush","constants","Z_SYNC_FLUSH","finishFlush","brotliOptions","BROTLI_OPERATION_FLUSH","isBrotliSupported","isFunction","createBrotliDecompress","httpFollow","httpsFollow","isHttps","supportedProtocols","protocols","map","protocol","dispatchBeforeRedirect","options","beforeRedirects","proxy","config","setProxy","configProxy","location","proxyUrl","URL","username","auth","password","base64","Buffer","from","toString","headers","host","hostname","port","proxyHost","path","includes","beforeRedirect","redirectOptions","href","isHttpAdapterSupported","process","kindOf","httpAdapter","Promise","dispatchHttpRequest","resolvePromise","rejectPromise","data","responseType","responseEncoding","method","toUpperCase","isFinished","isDone","rejected","req","emitter","onFinished","cancelToken","unsubscribe","abort","signal","removeEventListener","removeAllListeners","done","value","isRejected","resolve","reject","reason","emit","type","once","subscribe","aborted","addEventListener","fullPath","baseURL","url","parsed","convertedData","status","statusText","Blob","env","err","ERR_BAD_REQUEST","stripBOM","Readable","indexOf","normalize","set","onDownloadProgress","onUploadProgress","maxRate","maxUploadRate","undefined","maxDownloadRate","isSpecCompliantForm","userBoundary","getContentType","formHeaders","tag","boundary","isFormData","getHeaders","hasContentLength","knownLength","promisify","getLength","call","setContentLength","e","isBlob","size","setContentType","isStream","isBuffer","isArrayBuffer","Uint8Array","isString","length","maxBodyLength","contentLength","toFiniteNumber","getContentLength","isArray","objectMode","pipeline","noop","on","progress","Object","assign","upload","urlUsername","urlPassword","delete","pathname","search","params","paramsSerializer","replace","customErr","Error","message","exists","toJSON","agents","httpAgent","httpsAgent","socketPath","transport","isHttpsRequest","test","agent","maxRedirects","Infinity","insecureHTTPParser","request","handleResponse","res","destroyed","streams","responseLength","transformStream","download","push","responseStream","lastRequest","decompress","statusCode","createUnzip","offListeners","finished","response","statusMessage","responseBuffer","totalResponseBytes","handleStreamData","chunk","maxContentLength","destroy","ERR_BAD_RESPONSE","handlerStreamAborted","handleStreamError","handleStreamEnd","responseData","concat","handleRequestError","handleRequestSocket","socket","setKeepAlive","timeout","parseInt","isNaN","ERR_BAD_OPTION_VALUE","setTimeout","handleRequestTimeout","timeoutErrorMessage","transitional","clarifyTimeoutError","ETIMEDOUT","ECONNABORTED","ended","errored","pipe","end","__setProxy"],"mappings":"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","sourcesContent":["'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport buildURL from './../helpers/buildURL.js';\nimport {getProxyForUrl} from 'proxy-from-env';\nimport http from 'http';\nimport https from 'https';\nimport util from 'util';\nimport followRedirects from 'follow-redirects';\nimport zlib from 'zlib';\nimport {VERSION} from '../env/data.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport platform from '../platform/index.js';\nimport fromDataURI from '../helpers/fromDataURI.js';\nimport stream from 'stream';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport AxiosTransformStream from '../helpers/AxiosTransformStream.js';\nimport EventEmitter from 'events';\nimport formDataToStream from \"../helpers/formDataToStream.js\";\nimport readBlob from \"../helpers/readBlob.js\";\nimport ZlibHeaderTransformStream from '../helpers/ZlibHeaderTransformStream.js';\n\nconst zlibOptions = {\n  flush: zlib.constants.Z_SYNC_FLUSH,\n  finishFlush: zlib.constants.Z_SYNC_FLUSH\n};\n\nconst brotliOptions = {\n  flush: zlib.constants.BROTLI_OPERATION_FLUSH,\n  finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH\n}\n\nconst isBrotliSupported = utils.isFunction(zlib.createBrotliDecompress);\n\nconst {http: httpFollow, https: httpsFollow} = followRedirects;\n\nconst isHttps = /https:?/;\n\nconst supportedProtocols = platform.protocols.map(protocol => {\n  return protocol + ':';\n});\n\n/**\n * If the proxy or config beforeRedirects functions are defined, call them with the options\n * object.\n *\n * @param {Object<string, any>} options - The options object that was passed to the request.\n *\n * @returns {Object<string, any>}\n */\nfunction dispatchBeforeRedirect(options) {\n  if (options.beforeRedirects.proxy) {\n    options.beforeRedirects.proxy(options);\n  }\n  if (options.beforeRedirects.config) {\n    options.beforeRedirects.config(options);\n  }\n}\n\n/**\n * If the proxy or config afterRedirects functions are defined, call them with the options\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} configProxy configuration from Axios options object\n * @param {string} location\n *\n * @returns {http.ClientRequestArgs}\n */\nfunction setProxy(options, configProxy, location) {\n  let proxy = configProxy;\n  if (!proxy && proxy !== false) {\n    const proxyUrl = getProxyForUrl(location);\n    if (proxyUrl) {\n      proxy = new URL(proxyUrl);\n    }\n  }\n  if (proxy) {\n    // Basic proxy authorization\n    if (proxy.username) {\n      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');\n    }\n\n    if (proxy.auth) {\n      // Support proxy auth object form\n      if (proxy.auth.username || proxy.auth.password) {\n        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');\n      }\n      const base64 = Buffer\n        .from(proxy.auth, 'utf8')\n        .toString('base64');\n      options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n    }\n\n    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');\n    const proxyHost = proxy.hostname || proxy.host;\n    options.hostname = proxyHost;\n    // Replace 'host' since options is not a URL object\n    options.host = proxyHost;\n    options.port = proxy.port;\n    options.path = location;\n    if (proxy.protocol) {\n      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : `${proxy.protocol}:`;\n    }\n  }\n\n  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {\n    // Configure proxy for redirected request, passing the original config proxy to apply\n    // the exact same logic as if the redirected request was performed by axios directly.\n    setProxy(redirectOptions, configProxy, redirectOptions.href);\n  };\n}\n\nconst isHttpAdapterSupported = typeof process !== 'undefined' && utils.kindOf(process) === 'process';\n\n/*eslint consistent-return:0*/\nexport default isHttpAdapterSupported && function httpAdapter(config) {\n  /*eslint no-async-promise-executor:0*/\n  return new Promise(async function dispatchHttpRequest(resolvePromise, rejectPromise) {\n    let data = config.data;\n    const responseType = config.responseType;\n    const responseEncoding = config.responseEncoding;\n    const method = config.method.toUpperCase();\n    let isFinished;\n    let isDone;\n    let rejected = false;\n    let req;\n\n    // temporary internal emitter until the AxiosRequest class will be implemented\n    const emitter = new EventEmitter();\n\n    function onFinished() {\n      if (isFinished) return;\n      isFinished = true;\n\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(abort);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', abort);\n      }\n\n      emitter.removeAllListeners();\n    }\n\n    function done(value, isRejected) {\n      if (isDone) return;\n\n      isDone = true;\n\n      if (isRejected) {\n        rejected = true;\n        onFinished();\n      }\n\n      isRejected ? rejectPromise(value) : resolvePromise(value);\n    }\n\n    const resolve = function resolve(value) {\n      done(value);\n    };\n\n    const reject = function reject(value) {\n      done(value, true);\n    };\n\n    function abort(reason) {\n      emitter.emit('abort', !reason || reason.type ? new CanceledError(null, config, req) : reason);\n    }\n\n    emitter.once('abort', reject);\n\n    if (config.cancelToken || config.signal) {\n      config.cancelToken && config.cancelToken.subscribe(abort);\n      if (config.signal) {\n        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);\n      }\n    }\n\n    // Parse url\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    const parsed = new URL(fullPath, 'http://localhost');\n    const protocol = parsed.protocol || supportedProtocols[0];\n\n    if (protocol === 'data:') {\n      let convertedData;\n\n      if (method !== 'GET') {\n        return settle(resolve, reject, {\n          status: 405,\n          statusText: 'method not allowed',\n          headers: {},\n          config\n        });\n      }\n\n      try {\n        convertedData = fromDataURI(config.url, responseType === 'blob', {\n          Blob: config.env && config.env.Blob\n        });\n      } catch (err) {\n        throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);\n      }\n\n      if (responseType === 'text') {\n        convertedData = convertedData.toString(responseEncoding);\n\n        if (!responseEncoding || responseEncoding === 'utf8') {\n          convertedData = utils.stripBOM(convertedData);\n        }\n      } else if (responseType === 'stream') {\n        convertedData = stream.Readable.from(convertedData);\n      }\n\n      return settle(resolve, reject, {\n        data: convertedData,\n        status: 200,\n        statusText: 'OK',\n        headers: new AxiosHeaders(),\n        config\n      });\n    }\n\n    if (supportedProtocols.indexOf(protocol) === -1) {\n      return reject(new AxiosError(\n        'Unsupported protocol ' + protocol,\n        AxiosError.ERR_BAD_REQUEST,\n        config\n      ));\n    }\n\n    const headers = AxiosHeaders.from(config.headers).normalize();\n\n    // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    // User-Agent is specified; handle case where no UA header is desired\n    // Only set header if it hasn't been set in config\n    headers.set('User-Agent', 'axios/' + VERSION, false);\n\n    const onDownloadProgress = config.onDownloadProgress;\n    const onUploadProgress = config.onUploadProgress;\n    const maxRate = config.maxRate;\n    let maxUploadRate = undefined;\n    let maxDownloadRate = undefined;\n\n    // support for spec compliant FormData objects\n    if (utils.isSpecCompliantForm(data)) {\n      const userBoundary = headers.getContentType(/boundary=([-_\\w\\d]{10,70})/i);\n\n      data = formDataToStream(data, (formHeaders) => {\n        headers.set(formHeaders);\n      }, {\n        tag: `axios-${VERSION}-boundary`,\n        boundary: userBoundary && userBoundary[1] || undefined\n      });\n      // support for https://www.npmjs.com/package/form-data api\n    } else if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {\n      headers.set(data.getHeaders());\n\n      if (!headers.hasContentLength()) {\n        try {\n          const knownLength = await util.promisify(data.getLength).call(data);\n          headers.setContentLength(knownLength);\n          /*eslint no-empty:0*/\n        } catch (e) {\n        }\n      }\n    } else if (utils.isBlob(data)) {\n      data.size && headers.setContentType(data.type || 'application/octet-stream');\n      headers.setContentLength(data.size || 0);\n      data = stream.Readable.from(readBlob(data));\n    } else if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(new AxiosError(\n          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',\n          AxiosError.ERR_BAD_REQUEST,\n          config\n        ));\n      }\n\n      // Add Content-Length header if data exists\n      headers.setContentLength(data.length, false);\n\n      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n        return reject(new AxiosError(\n          'Request body larger than maxBodyLength limit',\n          AxiosError.ERR_BAD_REQUEST,\n          config\n        ));\n      }\n    }\n\n    const contentLength = utils.toFiniteNumber(headers.getContentLength());\n\n    if (utils.isArray(maxRate)) {\n      maxUploadRate = maxRate[0];\n      maxDownloadRate = maxRate[1];\n    } else {\n      maxUploadRate = maxDownloadRate = maxRate;\n    }\n\n    if (data && (onUploadProgress || maxUploadRate)) {\n      if (!utils.isStream(data)) {\n        data = stream.Readable.from(data, {objectMode: false});\n      }\n\n      data = stream.pipeline([data, new AxiosTransformStream({\n        length: contentLength,\n        maxRate: utils.toFiniteNumber(maxUploadRate)\n      })], utils.noop);\n\n      onUploadProgress && data.on('progress', progress => {\n        onUploadProgress(Object.assign(progress, {\n          upload: true\n        }));\n      });\n    }\n\n    // HTTP basic authentication\n    let auth = undefined;\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n\n    if (!auth && parsed.username) {\n      const urlUsername = parsed.username;\n      const urlPassword = parsed.password;\n      auth = urlUsername + ':' + urlPassword;\n    }\n\n    auth && headers.delete('authorization');\n\n    let path;\n\n    try {\n      path = buildURL(\n        parsed.pathname + parsed.search,\n        config.params,\n        config.paramsSerializer\n      ).replace(/^\\?/, '');\n    } catch (err) {\n      const customErr = new Error(err.message);\n      customErr.config = config;\n      customErr.url = config.url;\n      customErr.exists = true;\n      return reject(customErr);\n    }\n\n    headers.set(\n      'Accept-Encoding',\n      'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false\n      );\n\n    const options = {\n      path,\n      method: method,\n      headers: headers.toJSON(),\n      agents: { http: config.httpAgent, https: config.httpsAgent },\n      auth,\n      protocol,\n      beforeRedirect: dispatchBeforeRedirect,\n      beforeRedirects: {}\n    };\n\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname;\n      options.port = parsed.port;\n      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n\n    let transport;\n    const isHttpsRequest = isHttps.test(options.protocol);\n    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsRequest ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n      if (config.beforeRedirect) {\n        options.beforeRedirects.config = config.beforeRedirect;\n      }\n      transport = isHttpsRequest ? httpsFollow : httpFollow;\n    }\n\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    } else {\n      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited\n      options.maxBodyLength = Infinity;\n    }\n\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    }\n\n    // Create the request\n    req = transport.request(options, function handleResponse(res) {\n      if (req.destroyed) return;\n\n      const streams = [res];\n\n      const responseLength = +res.headers['content-length'];\n\n      if (onDownloadProgress) {\n        const transformStream = new AxiosTransformStream({\n          length: utils.toFiniteNumber(responseLength),\n          maxRate: utils.toFiniteNumber(maxDownloadRate)\n        });\n\n        onDownloadProgress && transformStream.on('progress', progress => {\n          onDownloadProgress(Object.assign(progress, {\n            download: true\n          }));\n        });\n\n        streams.push(transformStream);\n      }\n\n      // decompress the response body transparently if required\n      let responseStream = res;\n\n      // return the last request in case of redirects\n      const lastRequest = res.req || req;\n\n      // if decompress disabled we should not decompress\n      if (config.decompress !== false && res.headers['content-encoding']) {\n        // if no content, but headers still say that it is encoded,\n        // remove the header not confuse downstream operations\n        if (method === 'HEAD' || res.statusCode === 204) {\n          delete res.headers['content-encoding'];\n        }\n\n        switch (res.headers['content-encoding']) {\n        /*eslint default-case:0*/\n        case 'gzip':\n        case 'x-gzip':\n        case 'compress':\n        case 'x-compress':\n          // add the unzipper to the body stream processing pipeline\n          streams.push(zlib.createUnzip(zlibOptions));\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        case 'deflate':\n          streams.push(new ZlibHeaderTransformStream());\n\n          // add the unzipper to the body stream processing pipeline\n          streams.push(zlib.createUnzip(zlibOptions));\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        case 'br':\n          if (isBrotliSupported) {\n            streams.push(zlib.createBrotliDecompress(brotliOptions));\n            delete res.headers['content-encoding'];\n          }\n        }\n      }\n\n      responseStream = streams.length > 1 ? stream.pipeline(streams, utils.noop) : streams[0];\n\n      const offListeners = stream.finished(responseStream, () => {\n        offListeners();\n        onFinished();\n      });\n\n      const response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: new AxiosHeaders(res.headers),\n        config,\n        request: lastRequest\n      };\n\n      if (responseType === 'stream') {\n        response.data = responseStream;\n        settle(resolve, reject, response);\n      } else {\n        const responseBuffer = [];\n        let totalResponseBytes = 0;\n\n        responseStream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length;\n\n          // make sure the content length is not over the maxContentLength if specified\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            // stream.destroy() emit aborted event before calling reject() on Node.js v16\n            rejected = true;\n            responseStream.destroy();\n            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n              AxiosError.ERR_BAD_RESPONSE, config, lastRequest));\n          }\n        });\n\n        responseStream.on('aborted', function handlerStreamAborted() {\n          if (rejected) {\n            return;\n          }\n\n          const err = new AxiosError(\n            'maxContentLength size of ' + config.maxContentLength + ' exceeded',\n            AxiosError.ERR_BAD_RESPONSE,\n            config,\n            lastRequest\n          );\n          responseStream.destroy(err);\n          reject(err);\n        });\n\n        responseStream.on('error', function handleStreamError(err) {\n          if (req.destroyed) return;\n          reject(AxiosError.from(err, null, config, lastRequest));\n        });\n\n        responseStream.on('end', function handleStreamEnd() {\n          try {\n            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n            if (responseType !== 'arraybuffer') {\n              responseData = responseData.toString(responseEncoding);\n              if (!responseEncoding || responseEncoding === 'utf8') {\n                responseData = utils.stripBOM(responseData);\n              }\n            }\n            response.data = responseData;\n          } catch (err) {\n            reject(AxiosError.from(err, null, config, response.request, response));\n          }\n          settle(resolve, reject, response);\n        });\n      }\n\n      emitter.once('abort', err => {\n        if (!responseStream.destroyed) {\n          responseStream.emit('error', err);\n          responseStream.destroy();\n        }\n      });\n    });\n\n    emitter.once('abort', err => {\n      reject(err);\n      req.destroy(err);\n    });\n\n    // Handle errors\n    req.on('error', function handleRequestError(err) {\n      // @todo remove\n      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;\n      reject(AxiosError.from(err, null, config, req));\n    });\n\n    // set tcp keep alive to prevent drop connection by peer\n    req.on('socket', function handleRequestSocket(socket) {\n      // default interval of sending ack packet is 1 minute\n      socket.setKeepAlive(true, 1000 * 60);\n    });\n\n    // Handle request timeout\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      const timeout = parseInt(config.timeout, 10);\n\n      if (isNaN(timeout)) {\n        reject(new AxiosError(\n          'error trying to parse `config.timeout` to int',\n          AxiosError.ERR_BAD_OPTION_VALUE,\n          config,\n          req\n        ));\n\n        return;\n      }\n\n      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devouring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        if (isDone) return;\n        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n        const transitional = config.transitional || transitionalDefaults;\n        if (config.timeoutErrorMessage) {\n          timeoutErrorMessage = config.timeoutErrorMessage;\n        }\n        reject(new AxiosError(\n          timeoutErrorMessage,\n          transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n          config,\n          req\n        ));\n        abort();\n      });\n    }\n\n\n    // Send the request\n    if (utils.isStream(data)) {\n      let ended = false;\n      let errored = false;\n\n      data.on('end', () => {\n        ended = true;\n      });\n\n      data.once('error', err => {\n        errored = true;\n        req.destroy(err);\n      });\n\n      data.on('close', () => {\n        if (!ended && !errored) {\n          abort(new CanceledError('Request stream has been aborted', config, req));\n        }\n      });\n\n      data.pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n}\n\nexport const __setProxy = setProxy;\n"]},"metadata":{},"sourceType":"module"}